# -*- coding: utf-8 -*-
#
# Copyright (c) {% now 'utc', '%Y' %}, {{ author }}
# All rights reserved.
#
from connect.eaas.core.decorators import (
    event,
    {%- if 'scheduled' in event_types %}
    schedulable,
    {%- endif %}
    {%- if include_variables_example == 'y' %}
    variables,
    {%- endif %}
)
{%- if 'events' in application_types %}
from connect.eaas.core.extension import EventsApplicationBase
{%- endif %}
from connect.eaas.core.responses import (
    {%- if background %}
    BackgroundResponse,
    {%- endif %}
    {%- if interactive %}
    InteractiveResponse,
    {%- endif %}
    {%- if 'scheduled' in event_types %}
    ScheduledExecutionResponse,
    {%- endif %}
)


{% if include_variables_example == 'y' -%}
@variables([
    {
        'name': 'VAR_NAME_1',
        'initial_value': 'VAR_VALUE_1',
        'secure': False,
    },
    {
        'name': 'VAR_NAME_N',
        'initial_value': 'VAR_VALUE_N',
        'secure': True,
    },
])
{% endif -%}
class {{ project_slug|replace("_", " ")|title|replace(" ", "") }}EventsApplication(EventsApplicationBase):
    {% for bg_event in background -%}
    @event(
        '{{ bg_event }}',
        statuses=[
            {% for status in statuses_by_event[bg_event] -%}
            '{{status}}',{% if loop.index % 3 != 0 and not loop.last %} {% endif %}{% if loop.index % 3 == 0 and not loop.last %}{{ '\n            '|e }}{% endif %}
            {%- endfor %}
        ],
    )
    {% if use_asyncio == 'y' %}async {% endif %}def handle_{{bg_event}}(self, request):
        self.logger.info(f"Obtained request with id {request['id']}")
        return BackgroundResponse.done()

    {% endfor -%}


    {% for interactive_event in interactive -%}
    {% if statuses_by_event[interactive_event] -%}
    @event(
        '{{ interactive_event }}',
        statuses=[
            {% for status in statuses_by_event[interactive_event] -%}
            '{{status}}',{% if loop.index % 3 != 0 and not loop.last %} {% endif %}{% if loop.index % 3 == 0 and not loop.last %}{{ '\n            '|e }}{% endif %}
            {%- endfor %}
        ],
    )
    {% else -%}
    @event('{{ interactive_event }}')
    {% endif -%}
    {% if use_asyncio == 'y' %}async {% endif %}def handle_{{interactive_event}}(self, request):
        self.logger.info(f"Obtained request with id {request['id']}")
        return InteractiveResponse.done(
            http_status=200,
            headers={'X-Custom-Header': 'value'},
            body=request,
        )

    {% endfor -%}


    {% if 'scheduled' in event_types -%}
    @schedulable('Schedulable method', 'It can be used to test DevOps scheduler.')
    {% if use_asyncio == 'y' %}async {% endif %}def execute_scheduled_processing(self, schedule):
        self.logger.info(
            f"Received event for schedule  {schedule['id']}",
        )
        return ScheduledExecutionResponse.done()

    {% endif -%}
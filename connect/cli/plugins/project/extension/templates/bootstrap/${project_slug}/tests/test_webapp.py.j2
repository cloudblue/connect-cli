# -*- coding: utf-8 -*-
#
# Copyright (c) {% now 'utc', '%Y' %}, {{ author }}
# All rights reserved.
#
{% if extension_type == 'transformations' -%}
import pytest

{% endif -%}
{% if extension_type == 'multiaccount' -%}
from connect.client import R

from {{ package_name }}.schemas import Marketplace, Settings
{% endif -%}
from {{ package_name }}.webapp import {{ project_slug|replace("_", " ")|title|replace(" ", "") }}WebApplication


{% if extension_type == 'transformations' -%}
def test_validate_copy_columns(test_client_factory):
    data = {
        'settings': [
            {
                'from': 'columnInput1',
                'to': 'newColumn1',
            },
            {
                'from': 'columnInput2',
                'to': 'newColumn2',
            },
        ],
        'columns': {
            'input': [
                {'name': 'columnInput1'},
                {'name': 'columnInput2'},
            ],
            'output': [],
        },
    }

    client = test_client_factory({{ project_slug|replace("_", " ")|title|replace(" ", "") }}WebApplication)

    response = client.post('/api/validate/copy_columns', json=data)
    assert response.status_code == 200

    data = response.json()
    assert data == {
        'overview': 'columnInput1  -->  newColumn1\ncolumnInput2  -->  newColumn2\n',
    }


@pytest.mark.parametrize(
    'data',
    (
        {},
        {'settings': {}},
        {'settings': []},
        {'settings': [], 'columns': {}},
    ),
)
def test_validate_copy_columns_missing_settings_or_invalid(test_client_factory, data):

    client = test_client_factory({{ project_slug|replace("_", " ")|title|replace(" ", "") }}WebApplication)

    response = client.post('/api/validate/copy_columns', json=data)
    assert response.status_code == 400
    assert response.json() == {'error': 'Invalid input data'}


def test_validate_copy_columns_invalid_settings(test_client_factory):
    data = {'settings': [{'x': 'y'}], 'columns': {'input': []}}

    client = test_client_factory({{ project_slug|replace("_", " ")|title|replace(" ", "") }}WebApplication)

    response = client.post('/api/validate/copy_columns', json=data)
    assert response.status_code == 400
    assert response.json() == {'error': 'Invalid settings format'}


def test_validate_copy_columns_invalid_from(test_client_factory):
    data = {'settings': [{'from': 'Hola', 'to': 'Hola2'}], 'columns': {'input': [{'name': 'Gola'}]}}

    client = test_client_factory({{ project_slug|replace("_", " ")|title|replace(" ", "") }}WebApplication)

    response = client.post('/api/validate/copy_columns', json=data)
    assert response.status_code == 400
    assert response.json() == {'error': 'The input column Hola does not exists'}


@pytest.mark.parametrize(
    'data',
    (
        {
            'settings': [
                {'from': 'A', 'to': 'C'},
                {'from': 'B', 'to': 'C'},
            ],
            'columns': {
                'input': [
                    {'name': 'A'},
                    {'name': 'B'},
                ],
            },
        },
        {
            'settings': [
                {'from': 'A', 'to': 'C'},
            ],
            'columns': {
                'input': [
                    {'name': 'A'},
                    {'name': 'C'},
                ],
            },
        },
    ),
)
def test_validate_copy_columns_not_unique_name(test_client_factory, data):
    client = test_client_factory({{ project_slug|replace("_", " ")|title|replace(" ", "") }}WebApplication)

    response = client.post('/api/validate/copy_columns', json=data)
    assert response.status_code == 400
    assert response.json() == {
        'error': 'Invalid column name C. The to field should be unique',
    }
{% else -%}
def test_list_marketplaces(test_client_factory, {% if use_asyncio == 'y' %}async_{% endif %}client_mocker_factory):
    marketplaces = [
        {
            'id': 'MP-000',
            'name': 'MP 000',
            'description': 'MP 000 description',
            'icon': 'mp_000.png',
        },
        {
            'id': 'MP-001',
            'name': 'MP 001',
            'description': 'MP 001 description',
            'icon': 'mp_001.png',
        },
    ]
    client_mocker = {% if use_asyncio == 'y' %}async_{% endif %}client_mocker_factory()

    client_mocker.marketplaces.all().mock(return_value=marketplaces)

    client = test_client_factory({{ project_slug|replace("_", " ")|title|replace(" ", "") }}WebApplication)
    response = client.get('/api/marketplaces')

    assert response.status_code == 200

    data = response.json()

    assert data == marketplaces


def test_list_marketplaces_api_error(test_client_factory, {% if use_asyncio == 'y' %}async_{% endif %}client_mocker_factory):
    client_mocker = {% if use_asyncio == 'y' %}async_{% endif %}client_mocker_factory()

    error_data = {
        'error_code': 'AUTH_001',
        'errors': [
            'API request is unauthorized.',
        ],
    }

    client_mocker.marketplaces.all().mock(
        status_code=401,
        return_value=error_data,
    )

    client = test_client_factory({{ project_slug|replace("_", " ")|title|replace(" ", "") }}WebApplication)
    response = client.get('/api/marketplaces')

    assert response.status_code == 401
    assert response.json() == error_data


{% if extension_type == 'multiaccount' -%}
def test_retrieve_settings_empty(test_client_factory):
    installation = {
        'id': 'EIN-000',
        'settings': {},
    }

    client = test_client_factory({{ project_slug|replace("_", " ")|title|replace(" ", "") }}WebApplication)

    response = client.get('/api/settings', installation=installation)
    assert response.status_code == 200

    data = response.json()
    assert data['marketplaces'] == []


def test_retrieve_settings(test_client_factory):
    marketplaces = [
        {
            'id': 'MP-000',
            'name': 'MP 000',
            'description': 'MP 000 description',
            'icon': 'mp_000.png',
        },
    ]

    installation = {
        'id': 'EIN-000',
        'settings': {
            'marketplaces': marketplaces,
        },
    }

    client = test_client_factory({{ project_slug|replace("_", " ")|title|replace(" ", "") }}WebApplication)

    response = client.get('/api/settings', installation=installation)
    assert response.status_code == 200

    data = response.json()
    assert data['marketplaces'] == marketplaces


def test_save_settings(test_client_factory, {% if use_asyncio == 'y' %}async_{% endif %}client_mocker_factory):
    settings = Settings(
        marketplaces=[
            Marketplace(id='MP-000', name='My MP', description='My MP description', icon='/mp.png'),
        ],
    )

    client_mocker = {% if use_asyncio == 'y' %}async_{% endif %}client_mocker_factory()

    client_mocker('devops').installations['EIN-000'].update(
        return_value={},
        match_body={
            'settings': settings.dict(),
        },
    )

    client = test_client_factory({{ project_slug|replace("_", " ")|title|replace(" ", "") }}WebApplication)

    response = client.post(
        '/api/settings',
        json=settings.dict(),
        context={'installation_id': 'EIN-000'},
    )
    assert response.status_code == 200

    data = response.json()
    assert data == settings.dict()


def test_generate_chart_data(test_client_factory, {% if use_asyncio == 'y' %}async_{% endif %}client_mocker_factory):
    marketplaces = [
        {
            'id': 'MP-000',
            'name': 'MP 000',
            'description': 'MP 000 description',
            'icon': 'mp_000.png',
        },
        {
            'id': 'MP-001',
            'name': 'MP 001',
            'description': 'MP 001 description',
            'icon': 'mp_001.png',
        },
    ]

    installation = {
        'id': 'EIN-000',
        'settings': {
            'marketplaces': marketplaces,
        },
    }

    client_mocker = {% if use_asyncio == 'y' %}async_{% endif %}client_mocker_factory()
    for idx, mp in enumerate(marketplaces):
        client_mocker('subscriptions').assets.filter(
            R().marketplace.id.eq(mp['id']) & R().status.eq('active'),
        ).count(return_value=idx)

    client = test_client_factory({{ project_slug|replace("_", " ")|title|replace(" ", "") }}WebApplication)
    response = client.get('/api/chart', installation=installation)

    assert response.status_code == 200

    assert response.json() == {
        'type': 'bar',
        'data': {
            'labels': ['MP-000', 'MP-001'],
            'datasets': [
                {
                    'label': 'Subscriptions',
                    'data': [0, 1],
                },
            ],
        },
    }
{% endif %}
{% endif -%}

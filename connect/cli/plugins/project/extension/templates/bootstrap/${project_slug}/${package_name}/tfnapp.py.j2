# -*- coding: utf-8 -*-
#
# Copyright (c) {% now 'utc', '%Y' %}, {{ author }}
# All rights reserved.
#
from connect.eaas.core.decorators import manual_transformation, transformation{% if include_variables_example == 'y' -%}, variables{% endif %}
from connect.eaas.core.extension import TransformationsApplicationBase
from connect.eaas.core.responses import RowTransformationResponse


{% if include_variables_example == 'y' -%}
@variables([{
    'name': 'VAR_NAME_1',
    'initial_value': 'VAR_VALUE_1',
    'secure': False,
}])
{% endif -%}
class {{ project_slug|replace("_", " ")|title|replace(" ", "") }}TransformationsApplication(TransformationsApplicationBase):
    @transformation(
        name='Manual transformation',
        description=(
            'This transformation function allows to describe a manual '
            'procedure to be done.'
        ),
        edit_dialog_ui='/static/transformations/manual.html',
    )
    @manual_transformation()
    {% if use_asyncio == 'y' %}async {% endif %}def manual_transformation(self, row: dict):
        pass

    @transformation(
        name='Copy Column(s)',
        description=(
            'This transformation function allows copy values from Input to Output columns, '
            'which can be used in case of change column name in the output data or '
            'create a copy of values in table.'
        ),
        edit_dialog_ui='/static/transformations/copy.html',
    )
    def copy_columns(self, row: dict):
        tfn_settings = (
            self.transformation_request['transformation']['settings']
        )
        result = {}

        for setting in tfn_settings:
            result[setting['to']] = row[setting['from']]

        return RowTransformationResponse.done(result)


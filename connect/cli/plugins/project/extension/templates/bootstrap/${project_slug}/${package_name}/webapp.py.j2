# -*- coding: utf-8 -*-
#
# Copyright (c) {% now 'utc', '%Y' %}, {{ author }}
# All rights reserved.
#
{%- if extension_type == 'transformations' %}
from connect.eaas.core.decorators import (
    router,
    web_app,
)
from connect.eaas.core.extension import WebApplicationBase
from fastapi.responses import JSONResponse
{%- else %}
from typing import List

from connect.client import {% if use_asyncio == 'y' %}Async{% endif %}ConnectClient{% if extension_type == 'multiaccount' %}, R{% endif %}
from connect.eaas.core.decorators import (
    {%- if webapp_supports_ui == 'y'%}
    account_settings_page,
    module_pages,
    {%- endif %}
    router,
    {%- if include_variables_example == 'y' %}
    variables,
    {%- endif %}
    web_app,
)
from connect.eaas.core.extension import WebApplicationBase
{%- if use_asyncio == 'y' and extension_type == 'multiaccount' %}
from connect.eaas.core.inject.asynchronous import get_installation, get_installation_client
{%- elif use_asyncio == 'y' and extension_type != 'multiaccount' %}
from connect.eaas.core.inject.asynchronous import get_extension_client
{%- endif %}
{%- if extension_type == 'multiaccount' %}
from connect.eaas.core.inject.common import get_call_context
from connect.eaas.core.inject.models import Context
{%- endif %}
{%- if use_asyncio != 'y' and extension_type == 'multiaccount' %}
from connect.eaas.core.inject.synchronous import get_installation, get_installation_client
{%- elif  use_asyncio != 'y' and extension_type != 'multiaccount' %}
from connect.eaas.core.inject.synchronous import get_extension_client
{%- endif %}
from fastapi import Depends

from {{ package_name }}.schemas import Marketplace{% if extension_type == 'multiaccount' %}, Settings{% endif %}
{%- endif %}


{% if include_variables_example == 'y' -%}
@variables([
    {
        'name': 'VAR_NAME_1',
        'initial_value': 'VAR_VALUE_1',
        'secure': False,
    },
    {
        'name': 'VAR_NAME_N',
        'initial_value': 'VAR_VALUE_N',
        'secure': True,
    },
])
{% endif -%}
@web_app(router)
{% if webapp_supports_ui == 'y' and extension_type != 'transformations' -%}
@account_settings_page('Chart settings', '/static/settings.html')
@module_pages('Chart', '/static/index.html')
{% endif -%}
class {{ project_slug|replace("_", " ")|title|replace(" ", "") }}WebApplication(WebApplicationBase):

    {% if extension_type != 'transformations' -%}@router.get(
        '/marketplaces',
        summary='List all available marketplaces',
        response_model=List[Marketplace],
    )
    {% if use_asyncio == 'y' %}async {% endif %}def list_marketplaces(
        self,
        client: {% if use_asyncio == 'y' %}Async{% endif %}ConnectClient = Depends(get_{% if extension_type == 'multiaccount' %}installation{% else %}extension{% endif %}_client),
    ):
        return [
            Marketplace(**marketplace)
            {% if use_asyncio == 'y' %}async {% endif %}for marketplace in client.marketplaces.all().values_list(
                'id', 'name', 'description', 'icon',
            )
        ]

    {% if extension_type == 'multiaccount' -%}
    @router.get(
        '/settings',
        summary='Retrieve charts settings',
        response_model=Settings,
    )
    {% if use_asyncio == 'y' %}async {% endif %}def retrieve_settings(
        self,
        installation: dict = Depends(get_installation),
    ):
        return Settings(marketplaces=installation['settings'].get('marketplaces', []))

    @router.post(
        '/settings',
        summary='Save charts settings',
        response_model=Settings,
    )
    {% if use_asyncio == 'y' %}async {% endif %}def save_settings(
        self,
        settings: Settings,
        context: Context = Depends(get_call_context),
        client: {% if use_asyncio == 'y' %}Async{% endif %}ConnectClient = Depends(get_installation_client),
    ):
        {% if use_asyncio == 'y' %}await {% endif %}client('devops').installations[context.installation_id].update(
            payload={
                'settings': settings.dict(),
            },
        )
        return settings

    @router.get(
        '/chart',
        summary='Generate chart data',
    )
    {% if use_asyncio == 'y' %}async {% endif %}def generate_chart_data(
        self,
        installation: dict = Depends(get_installation),
        client: {% if use_asyncio == 'y' %}Async{% endif %}ConnectClient = Depends(get_installation_client),
    ):
        data = {}
        for mp in installation['settings'].get('marketplaces', []):
            active_assets = {% if use_asyncio == 'y' %}await {% endif %}client('subscriptions').assets.filter(
                R().marketplace.id.eq(mp['id']) & R().status.eq('active'),
            ).count()
            data[mp['id']] = active_assets

        return {
            'type': 'bar',
            'data': {
                'labels': list(data.keys()),
                'datasets': [
                    {
                        'label': 'Subscriptions',
                        'data': list(data.values()),
                    },
                ],
            },
        }
    {%- endif %}

    {%- else %}def validate_copy_columns(self, data):
        if (
            'settings' not in data
            or not isinstance(data['settings'], list)
            or 'columns' not in data
            or 'input' not in data['columns']
        ):
            return JSONResponse(status_code=400, content={'error': 'Invalid input data'})

        settings = data['settings']
        input_columns = data['columns']['input']
        available_input_columns = [c['name'] for c in input_columns]
        unique_names = [c['name'] for c in input_columns]
        overview = []

        for s in settings:
            if 'from' not in s or 'to' not in s:
                return JSONResponse(
                    status_code=400,
                    content={'error': 'Invalid settings format'},
                )
            if s['from'] not in available_input_columns:
                return JSONResponse(
                    status_code=400,
                    content={'error': f'The input column {s["from"]} does not exists'},
                )
            if s['to'] in unique_names:
                return JSONResponse(
                    status_code=400,
                    content={
                        'error': f'Invalid column name {s["to"]}. The to field should be unique',
                    },
                )
            unique_names.append(s['to'])
            overview.append(f'{s["from"]}  -->  {s["to"]}')

        overview = ''.join([row + '\n' for row in overview])

        return {
            'overview': overview,
        }

    @router.post(
        '/validate/{transformation_function}',
        summary='Validate settings',
    )
    def validate_tfn_settings(
            self,
            transformation_function: str,
            data: dict,
    ):
        try:
            method = getattr(self, f'validate_{transformation_function}')
            return method(data)
        except AttributeError:
            return JSONResponse(
                status_code=400,
                content={
                    'error': f'The validation method {transformation_function} does not exist',
                },
            )

{%- endif %}